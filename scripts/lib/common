#!/usr/bin/env bash
#**************************************
# common
#
# Collection of common commands.
#**************************************

#*******************************************
# Users/Groups
#*******************************************
# List ids/gids of current user
list_current_user_ids() {
    id
}

# List ids/gids of a user
list_user_ids() {
    user="$1"

    id "$user"
}

# Returns user's uid
get_user_id() {
    user="$1"

    id -u "$user"
}

ls_all_users() {
    less /etc/passwd
}

ls_all_groups() {
    # compgen -g
    cat /etc/group
}

# Get all members in group
get_group_members() {
    getent group $1
}

# Get all groups user belong to
get_user_groups() {
    groups $1
}

create_new_sudo_user() {
    # Set vars
    USERNAME=
    USER_UID=
    USER_GID=
    USER_PASSWORD=

    # Create group
    groupadd --gid $USER_GID $USERNAME

    # Create user
    useradd -s /bin/zsh \
        --uid $USER_UID \
        --gid $USER_GID \
        -p "$(openssl passwd -6 ${USER_PASSWORD})" \
        -m $USERNAME

    # Add user to group 'sudo'
    usermod -aG sudo $USERNAME

    # Add user to group 'docker'
    usermod -aG docker $USERNAME

    # Copy ssh
    rsync --archive --chown=$USERNAME:$USERNAME ~/.ssh /home/$USERNAME >/dev/null 2>&1 || true

    # Install dotfiles
    local _tmp=/tmp/dotfiles
    local _des=/home/$USERNAME/dotfiles
    git clone https://github.com/curol/dotfiles $_tmp || true
    rsync --archive --chown=$USERNAME:$USERNAME $_tmp/ $_des
    su -l $USERNAME /bin/zsh -c "$_des/install.sh"
}

remove_user() {
    _user=$1

    userdel -f -r "$_user"
}

add_user_to_docker_group() {
    # https://docs.docker.com/engine/install/linux-postinstall/
    # Add user to group 'docker'
    usermod -aG docker "$1"
    # activate the changes to groups
    newgrp docker

    # NOTE - If you still get errors then permissions for /var/run/docker.sock could be incorrect, per https://www.digitalocean.com/community/questions/how-to-fix-docker-got-permission-denied-while-trying-to-connect-to-the-docker-daemon-socket
    # Set correct permissions for docker.sock
    # sudo chmod 666 /var/run/docker.sock
}

#*******************************************
# Processes
#*******************************************
ls_shell_processes_() {
    # display the process for the current shell
    # PID returns the unique process ID
    # TTY returns the terminal type you're logged into
    # TIME returns the total amount of CPU usage
    # CMD returns the name of the command that launched the process.
    ps
}

ls_all_processes() {
    # To display all running processes for all users on your machine, including their usernames, and to show processes not attached to your terminal, you can use the command below:
    # ps: is the process status command.
    # a: displays information about other users' processes as well as your own.
    # u: displays the processes belonging to the specified usernames.
    # x: includes processes that do not have a controlling terminal.
    ps aux
}

interactive_processes_view() {
    htop
}

kill_process() {
    # Kill process - kill [PID]
    kill -9 "$1"
}

get_process_id() {
    # Get process id - pgrep [NAME]
    pgrep "$1"
}

#*******************************************
# Helpers
#*******************************************
create_xdg_directories_if_dont_exist() {
    XDG_CACHE_HOME="${XDG_CACHE_HOME:-$HOME/.cache}"
    XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
    XDG_DATA_HOME="${XDG_DATA_HOME:-$HOME/.local/share}"
    XDG_BIN_HOME="${XDG_BIN_HOME:-$HOME/.local/bin}"
    XDG_FONTS_DIR="${XDG_FONTS_DIR:-$HOME/.local/share/fonts}"

    mkdir -p XDG_BIN_HOME XDG_CACHE_HOME XDG_CONFIG_HOME XDG_DATA_HOME XDG_FONTS_DIR
}

check_if_root() {
    if [ "$(id -u)" -ne 0 ]; then
        echo -e 'Script must be run as root. Use sudo, su, or add "USER root" to your Dockerfile before running this script.'
        exit 1
    fi
}

get_os_type() {
    # if [[ $OSTYPE == 'darwin'* ]]; then
    #     echo "mac"
    # else
    #     echo "other"
    # fi
    case "$OSTYPE" in
    solaris*) echo "SOLARIS" ;;
    darwin*) echo "OSX" ;;
    linux*) echo "LINUX" ;;
    bsd*) echo "BSD" ;;
    msys*) echo "WINDOWS" ;;
    cygwin*) echo "WINDOWS" ;;
    *) echo "unknown: $OSTYPE" ;;
    esac
}

get_path_to_this_script() {
    local basedir
    basedir=$(dirname "$0")

    echo "$basedir"
}

test_echo_env() {
    echo "echo "$A" "$B" "$C""
}
