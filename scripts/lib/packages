#!/usr/bin/env bash
#**************************************
# packages
#
# Library for installing common packages.
#**************************************

install_debian_packages() {
    # Ensure apt is in non-interactive to avoid prompts
    export DEBIAN_FRONTEND=noninteractive

    local package_list="apt-utils \
        openssh-client \
        gnupg2 \
        dirmngr \
        iproute2 \
        procps \
        lsof \
        htop \
        net-tools \
        psmisc \
        curl \
        tree \
        wget \
        rsync \
        ca-certificates \
        unzip \
        bzip2 \
        zip \
        nano \
        vim-tiny \
        less \
        jq \
        lsb-release \
        apt-transport-https \
        dialog \
        libc6 \
        libgcc1 \
        libkrb5-3 \
        libgssapi-krb5-2 \
        libicu[0-9][0-9] \
        liblttng-ust[0-9] \
        libstdc++6 \
        zlib1g \
        locales \
        sudo \
        ncdu \
        man-db \
        strace \
        manpages \
        manpages-dev \
        bat \
        ripgrep \
        fzf \
        make \
        build-essential \
        zsh \
        fd-find \
        init-system-helpers"

    apt-get install -y --no-install-recommends $package_list

    apt-get -y upgrade --no-install-recommends
    apt-get autoremove -y

    # Ensure at least the en_US.UTF-8 UTF-8 locale is available = common need for both applications and things like the agnoster ZSH theme.
    if [ "${LOCALE_ALREADY_SET}" != "true" ] && ! grep -o -E '^\s*en_US.UTF-8\s+UTF-8' /etc/locale.gen >/dev/null; then
        echo "en_US.UTF-8 UTF-8" >>/etc/locale.gen
        locale-gen
        LOCALE_ALREADY_SET="true"
    fi
}

install_dotfiles() {
    echo "installing dotfiles..."
    if [ -z "$DOTFILES" ]; then
        echo "\$DOTFILES is empty. Not installing dotfiles."
    else
        if [ -z "$DOTFILES_SCRIPT" ]; then
            echo "\$DOTFILES_SCRIPT is empty. Not installing dotfiles."
        else
            su -l $USERNAME /bin/zsh -c "git clone $DOTFILES dotfiles"
            su -l $USERNAME /bin/zsh -c "dotfiles/$DOTFILES_SCRIPT"
        fi
    fi
}

# Powerline fonts: https://github.com/powerline/fonts
# Installing a font is just copying its file to specific font directory.
# ubuntu: sudo apt-get install fonts-powerline
# fedora/redhat: sudo dnf install powerline-fonts
# Or, clone repository
install_powerline_fonts() {
    local _fonts_dir="${XDG_FONTS_DIR:-$HOME/.local/share/fonts}"

    # clone
    git clone https://github.com/powerline/fonts.git --depth=1 "${_fonts_dir}"

    # install
    "$_fonts_dir"/install.sh

    # clean-up a bit
    rm -rf "${_fonts_dir}"
}

# This method only works on Linux. Itâ€™s the second recommended method if terminal emulator supports it as patching fonts is not needed, and it generally works with any coding font.
# Valid font paths can be listed with xset q
# https://powerline.readthedocs.io/en/latest/installation/linux.html#fonts-installation
install_powerline_fonts_2() {
    # download symbols
    wget https://github.com/powerline/powerline/raw/develop/font/PowerlineSymbols.otf
    wget https://github.com/powerline/powerline/raw/develop/font/10-powerline-symbols.conf
    # mv to font path
    mv PowerlineSymbols.otf ~/.local/share/fonts/
    # update font cache
    fc-cache -vf ~/.local/share/fonts/
    # install font config file
    mv 10-powerline-symbols.conf ~/.config/fontconfig/conf.d/
}

# Install docker
install_docker() {
    echo "installing docker..."
    curl -fsSL https://get.docker.com -o get-docker.sh
    sudo sh get-docker.sh
    # Add user to docker group
    # sudo groupadd docker
    sudo usermod -aG docker $USERNAME
}

# Install github cli using the package manager apt
# mac: https://github.com/cli/cli#macos
# linux: https://github.com/cli/cli/blob/trunk/docs/install_linux.md
install_github_cli() {
    type -p curl >/dev/null || sudo apt install curl -y
    curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg &&
        sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg &&
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list >/dev/null &&
        sudo apt update &&
        sudo apt install gh -y
}

# Install neovim
install_neovim() {
    # Install neovim
    echo "installing neovim..."
    mkdir -p /neovim && cd /neovim &&
        wget https://github.com/neovim/neovim/releases/download/stable/nvim.appimage &&
        chmod u+x nvim.appimage &&
        ./nvim.appimage --appimage-extract &&
        ln -s "/neovim/squashfs-root/usr/bin/nvim" "/usr/local/bin/nvim"
}

install_bat_extras() {
    local _src="${XDG_DATA_HOME:-$HOME/.local/share}/bat-extras"

    git clone https://github.com/eth-p/bat-extras "$_src"
    "$_src/build.sh" --install
}

install_bat_extras_if_exist() {
    # (type -p bat &>/dev/null || type -p batcat &>/dev/null) || echo "Package bat or batcat not installed."
    (type -p bat &>/dev/null || type -p batcat &>/dev/null) && (
        local _src=${XDG_DATA_HOME:-"$HOME/.local/share"}/bat-extras

        git clone https://github.com/eth-p/bat-extras "${_src}"
        "${_src}/build.sh" --install >/dev/null 2>&1
    )
}

install_bat_extras_if_not_exist() {
    (type -p bat &>/dev/null || type -p batcat &>/dev/null) || (
        local _src=${XDG_DATA_HOME:-"$HOME/.local/share"}/bat-extras

        git clone https://github.com/eth-p/bat-extras "${_src}"
        "${_src}/build.sh" --install >/dev/null 2>&1

    )
}

install_node() {
    local NODE_VERSION=${NODE_VERSION:-"18"}

    # Install node and enable
    curl -fsSL https://deb.nodesource.com/setup_${NODE_VERSION}.x | sudo bash -
    apt-get update
    apt-get install -y nodejs
}

init_node_config() {
    npm config set prefix ~/.npm-global
    export PATH=~/.npm-global/bin >>~/.exports
}

install_nvm() {
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash
}

# Install nvm and node
install_nvm_and_node() {
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash
    nvm install --lts
    nvm use node
}

# Install node and enable corepack
install_node_and_enable_corepack_and_pnpm() {
    local PNPM_VER=latest
    local _username=$1

    install_node

    corepack enable

    # Install pnpm
    su -l "$_username" -c "corepack prepare pnpm@$PNPM_VER --activate"
    su -l "$_username" -c 'pnpm setup'
}

install_pscale() {
    # local _username=$1

    # su -l "$_username" -c "corepack prepare pscale --activate"

    # Install dependencies
    sudo apt-get install default-mysql-client

    # Install pscale cli
    _pscale_dir="$HOME/.local/share/pscale"
    mkdir "$_pscale_dir"
    cd "$_pscale_dir" || echo "pscale directory not found." && exit 1
    wget https://github.com/planetscale/cli/releases/download/v0.138.0/pscale_0.138.0_linux_amd64.deb
    sudo dpkg -i pscale_0.138.0_linux_amd64.deb
}